group = 'gov.dvsa.vol'
version = '1.3'

apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/dvsa/*")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
//    implementation 'io.gatling.highcharts:gatling-charts-highcharts:3.13.4'
//    implementation 'io.gatling:gatling-core:3.13.4'
//    implementation 'io.gatling:gatling-http:3.13.4'
//    implementation 'org.scala-lang:scala3-library_3:3.6.3'
//    implementation 'org.apache.commons:commons-csv:1.13.0'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    // https://mvnrepository.com/artifact/io.gatling/gatling-maven-plugin
    implementation group: 'io.gatling', name: 'gatling-maven-plugin', version: '4.15.1'



    implementation 'org.dvsa.testing.lib:active-support:2.5.14'
    implementation 'org.dvsa.testing.lib:vol-uri-constructor:2.0.7'
    implementation 'org.dvsa.testing.framework:vol-api-calls:2.8.0'
}

tasks.withType(JavaExec).configureEach {
    systemProperties.putAll(System.getProperties())
}

tasks.withType(Test).configureEach {
    systemProperties.putAll(System.getProperties())
    useJUnitPlatform()
}

tasks.register('registerUser', JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set("io.gatling.app.Gatling")

    args = [
            "--simulation", "simulations.RegisterUserSimulation",
            "--results-folder", file("${rootDir}/gatling-results").absolutePath,
            "--bodies-folder", file(sourceSets.test.resources.srcDirs.first()).absolutePath
    ]
}

tasks.register('createApplication', JavaExec) {
    dependsOn testClasses
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set("io.gatling.app.Gatling")
    shouldRunAfter(test)

    doFirst {
        tasks.named("registerUsersViaAPI").get()
    }

    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set("io.gatling.app.Gatling")

    args = [
            "--simulation", "simulations.CreateApplicationSimulation",
            "--results-folder", file("${rootDir}/gatling-results").absolutePath,
            "--bodies-folder", file(sourceSets.test.resources.srcDirs.first()).absolutePath
    ]

    outputs.dir file("${rootDir}/gatling-results")

    doLast {
        tasks.named("cleanUp").get()
    }
}

tasks.register('searchOperator', JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set("io.gatling.app.Gatling")

    args = [
            "--simulation", "simulations.ExternalOperatorSearchSimulation",
            "--results-folder", file("${rootDir}/gatling-results").absolutePath,
            "--bodies-folder", file(sourceSets.test.resources.srcDirs.first()).absolutePath
    ]
}

tasks.register('internalSearchLicence', JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    mainClass.set("io.gatling.app.Gatling")

    args = [
            "--simulation", "simulations.InternalLicenceSearchSimulation",
            "--results-folder", file("${rootDir}/gatling-results").absolutePath,
            "--bodies-folder", file(sourceSets.test.resources.srcDirs.first()).absolutePath
    ]
}

tasks.register('registerUsersViaAPI', Test) {
    description = "Runs SelfServeRegisterUser and mainTest"
    doFirst {
        println "Running API User Registration Tests..."
    }

    useJUnitPlatform() // Ensure JUnit 5 is enabled

    filter {
        includeTestsMatching("*.registerUser") // Use full package name
    }
}

tasks.register('cleanUp', Test) {
    description = "Deletes loginId file after tests"

    doFirst {
        println("********* Deleting loginId file ************")
        sleep 2000
    }

    filter {
        includeTestsMatching("*.registerUser")
        includeTestsMatching("*.deleteFile")
    }

    doLast {
        println("*********** Finished deleting file **********")
    }
}