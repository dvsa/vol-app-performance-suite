group 'gov.dvsa.vol'
version '1.2'

apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'java'
apply plugin: 'application'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://nexus.olcs.dev-dvsacloud.uk/repository/maven-releases"
    }
}

dependencies {
    implementation group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '3.9.5'
    implementation group: 'io.gatling', name: 'gatling-core', version:'3.9.5'
    implementation group: 'io.gatling', name: 'gatling-http', version:'3.9.5'
    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.13.12'
    implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.10.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.1'

    implementation group: 'org.dvsa.testing.lib', name: 'active-support', version:'2.0.1.6'
    implementation group: 'org.dvsa.testing.lib', name: 'uri-constructor', version:'2.0.1'
    implementation group: 'org.dvsa.testing.framework', name: 'vol-api-calls', version:'2.0.1'
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaExec) {
    systemProperties = System.getProperties() as Map<String, ?>
}


tasks.withType(Test) {
    systemProperties = System.getProperties() as Map<String, ?>
}

task registerUser(type: JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.RegisterUserSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
}

task createApplication(type: JavaExec) {
    doFirst {
        registerUsersViaAPI.executeTests()
    }
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.CreateApplicationSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
    doLast {
        cleanUp.executeTests()
    }
}

task searchOperator(type: JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.ExternalOperatorSearchSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
}

task internalSearchLicence(type: JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.InternalLicenceSearchSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
}

task registerUsersViaAPI(type: Test) {
    filter {
        includeTest "*SelfServeRegisterUser", "mainTest"
    }
}

task cleanUp(type: Test) {
    filter {
        println("*********deleting loginId file************")
        sleep 2000
        includeTest "*SelfServeRegisterUser", "deleteFile"
        println("***********finishing deleting file**********")
    }
}