group 'gov.dvsa.vol'
version '1.0-SNAPSHOT'

apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    testCompile 'io.gatling.highcharts:gatling-charts-highcharts:3.1.2'
    testCompile 'io.gatling:gatling-core:3.1.2'
    testCompile 'io.gatling:gatling-http:3.1.2'
    testCompile 'org.scala-lang:scala-library:2.12.7'
    testCompile 'org.apache.commons:commons-csv:1.5'
    testCompile 'org.dvsa.testing.lib:active-support:1.4.4.7'
    testCompile 'org.dvsa.testing.lib:uri-constructor:1.5.4'
    testCompile 'org.dvsa.testing.framework:vol-api-calls:1.0'
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.897'
    }
}

import com.amazonaws.auth.*

repositories {
    maven {
        url "https://nexus.olcs.dev-dvsacloud.uk/repository/maven-releases"
        credentials(AwsCredentials) {
            def awsCredentials = new DefaultAWSCredentialsProviderChain().getCredentials()
            accessKey awsCredentials.getAWSAccessKeyId()
            secretKey awsCredentials.getAWSSecretKey()
        }
    }
}

tasks.withType(JavaExec) {
    systemProperties = System.getProperties()
}


tasks.withType(Test) {
    systemProperties = System.getProperties()
}

task registerUser(type: JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.RegisterUserSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
}

task createApplication(type: JavaExec) {
    doFirst {
        registerUsersViaAPI.executeTests()
    }
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.CreateApplicationSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
    doLast {
        cleanUp.executeTests()
    }
}

task createApplicationStress(type: JavaExec) {
    doFirst {
        registerUsersViaAPI.executeTests()
    }
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.CreateApplicationStressSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
    doLast {
        cleanUp.executeTests()
    }
}

task searchOperator(type: JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.ExternalOperatorSearchSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
}

task internalSearchLicence(type: JavaExec) {
    description = "Load testing with Gatling"
    classpath = sourceSets.test.runtimeClasspath
    main = "io.gatling.app.Gatling"
    //Specify the simulation to run
    args = [
            "--simulation", "simulations.InternalLicenceSearchSimulation",
            "--results-folder", "${buildDir}/gatling-results",
            "--bodies-folder", sourceSets.test.resources
    ]
}

task registerUsersViaAPI(type: Test) {
    filter {
        includeTest "*SelfServeRegisterUser", "mainTest"
    }
}

task cleanUp(type: Test) {
    filter {
        println("*********deleting loginId file************")
        sleep 2000
        includeTest "*SelfServeRegisterUser", "deleteFile"
        println("***********finishing deleting file**********")
    }
}